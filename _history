{"entries":[{"timestamp":1741143397290,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\",V!J+2UdRmfqOIgrP`w,\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"q+8a5+C|OgS~U|QxIBw%\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let headers: string[] = []\nlet type = \"bar\";\n\nlet pauseLoop = false;\n\nbasic.showIcon(IconNames.Heart)\n\n\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    pauseLoop = true;\n    let input = serial.readString()\n    if (input == \"getCols\\n\") {\n        serial.writeLine(\"H:\" + headers.join() + \":H\")\n    } else if (input == \"getType\\n\") {\n        serial.writeLine(\"T:\" + type + \":T\")\n    }\n    pauseLoop = false;\n})\n\ninput.onButtonPressed(Button.A, function () {\n    type = \"bar\";\n    serial.writeLine(\"T:\" + type + \":T\")\n    basic.showLeds(`\n        . . . . .\n        # . . . .\n        # # . # .\n        # # # # #\n        # # # # #\n        `)\n})\n\ninput.onButtonPressed(Button.B, function () {\n    type = \"pie\";\n    serial.writeLine(\"T:\" + type + \":T\")\n    basic.showLeds(`\n        . . # . .\n        . # # # .\n        # # # # #\n        . # # # .\n        . . # . .\n        `)\n})\n\nheaders.push(\"owl\")\nheaders.push(\"dove\")\nfor (let index = 0; index < 400; index++) {\n    let owl = \"\" + randint(0, 3)\n    let dove = \"\" + randint(0, 3)\n    if (!pauseLoop) {\n        serial.writeLine(`D:${owl},${dove}:D`);\n    }\n    basic.pause(200);\n}\nheaders.push(\"pigeon\")\nwhile (true) {\n    let owl = \"\" + randint(0, 2)\n    let dove = \"\" + randint(0, 7)\n    let pigeon = \"\" + randint(0, 4)\n    if (!pauseLoop) {\n        serial.writeLine(`D:${owl},${dove},${pigeon}:D`);\n    }\n    basic.pause(200);\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":1406,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":232,"start2":232,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1741143397289,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"loggraph\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1741143442240}